"""Create Tables 3.0

Revision ID: 4d3fee43a322
Revises: 
Create Date: 2025-09-07 23:26:27.132861

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4d3fee43a322'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('users', sa.)
    op.create_table('users',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('middle_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('usergroup', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index(op.f('ix_pima_users_email'), 'users', ['email'], unique=True, schema='pima')
    op.create_index(op.f('ix_pima_users_username'), 'users', ['username'], unique=True, schema='pima')
    op.create_table('images',
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('image_reference_type', sa.String(), nullable=True),
    sa.Column('image_reference_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('verification_status', sa.String(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='pima'
    )
    op.create_table('locations',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('location_name', sa.String(), nullable=False),
    sa.Column('location_type', sa.String(), nullable=False),
    sa.Column('parent_location_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['parent_location_id'], ['pima.locations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index('idx_locations_parent_location_id', 'locations', ['parent_location_id'], unique=False, schema='pima')
    op.create_table('programs',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('program_name', sa.String(), nullable=False),
    sa.Column('program_code', sa.String(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('program_code'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_table('staff',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('middle_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('manager_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('tns_id', sa.String(), nullable=True),
    sa.Column('commcare_mobile_worker_id', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('job_title', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('Active', 'Inactive', name='status_enum'), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['manager_id'], ['pima.staff.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index(op.f('ix_pima_staff_commcare_mobile_worker_id'), 'staff', ['commcare_mobile_worker_id'], unique=True, schema='pima')
    op.create_index(op.f('ix_pima_staff_email'), 'staff', ['email'], unique=True, schema='pima')
    op.create_index(op.f('ix_pima_staff_tns_id'), 'staff', ['tns_id'], unique=True, schema='pima')
    op.create_table('projects',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('program_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('project_name', sa.String(), nullable=False),
    sa.Column('project_unique_id', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('location_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['pima.locations.id'], ),
    sa.ForeignKeyConstraint(['program_id'], ['pima.programs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_unique_id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_table('farmer_groups',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('responsible_staff_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('tns_id', sa.String(), nullable=True),
    sa.Column('commcare_case_id', sa.String(), nullable=True),
    sa.Column('ffg_name', sa.String(), nullable=True),
    sa.Column('send_to_commcare', sa.Boolean(), nullable=True),
    sa.Column('send_to_commcare_status', sa.Enum('Pending', 'Processing', 'Complete', name='send_to_commcare_status_enum'), nullable=False),
    sa.Column('status', sa.Enum('Active', 'Inactive', name='status_enum'), nullable=False),
    sa.Column('location_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('fv_aa_sampling_round', sa.Integer(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['pima.locations.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['pima.projects.id'], ),
    sa.ForeignKeyConstraint(['responsible_staff_id'], ['pima.staff.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index('idx_farmer_groups_commcare_case_id', 'farmer_groups', ['commcare_case_id'], unique=False, schema='pima')
    op.create_index('idx_farmer_groups_project_id', 'farmer_groups', ['project_id'], unique=False, schema='pima')
    op.create_index('idx_farmer_groups_responsible_staff_id', 'farmer_groups', ['responsible_staff_id'], unique=False, schema='pima')
    op.create_index('idx_farmer_groups_tns_id', 'farmer_groups', ['tns_id'], unique=False, schema='pima')
    op.create_index(op.f('ix_pima_farmer_groups_commcare_case_id'), 'farmer_groups', ['commcare_case_id'], unique=True, schema='pima')
    op.create_index(op.f('ix_pima_farmer_groups_tns_id'), 'farmer_groups', ['tns_id'], unique=True, schema='pima')
    op.create_table('project_staff_roles',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('staff_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('commcare_location_id', sa.String(), nullable=True),
    sa.Column('commcare_case_id', sa.String(), nullable=True),
    sa.Column('tns_id', sa.String(), nullable=True),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('Active', 'Inactive', name='status_enum'), nullable=False),
    sa.Column('send_to_commcare', sa.Boolean(), nullable=False),
    sa.Column('send_to_commcare_status', sa.Enum('Pending', 'Processing', 'Complete', name='send_to_commcare_status_enum'), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['pima.projects.id'], ),
    sa.ForeignKeyConstraint(['staff_id'], ['pima.staff.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('commcare_case_id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('tns_id'),
    schema='pima'
    )
    op.create_table('training_modules',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('module_name', sa.String(), nullable=True),
    sa.Column('module_number', sa.Integer(), nullable=True),
    sa.Column('current_module', sa.Boolean(), nullable=True),
    sa.Column('current_previous', sa.Enum('Current', 'Previous', name='current_previous_enum'), nullable=False),
    sa.Column('sample_fv_aa_households', sa.Boolean(), nullable=True),
    sa.Column('sample_fv_aa_households_status', sa.String(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['pima.projects.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_table('households',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('farmer_group_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('household_name', sa.String(), nullable=False),
    sa.Column('household_number', sa.Integer(), nullable=False),
    sa.Column('tns_id', sa.String(), nullable=False),
    sa.Column('commcare_case_id', sa.String(), nullable=False),
    sa.Column('number_of_trees', sa.Integer(), nullable=True),
    sa.Column('farm_size', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('sampled_for_fv_aa', sa.Boolean(), nullable=False),
    sa.Column('farm_size_before', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('farm_size_after', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('farm_size_since', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('status', sa.Enum('Active', 'Inactive', name='status_enum'), nullable=False),
    sa.Column('visited_for_fv_aa', sa.Boolean(), nullable=False),
    sa.Column('fv_aa_sampling_round', sa.Integer(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farmer_group_id'], ['pima.farmer_groups.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('commcare_case_id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('tns_id'),
    schema='pima'
    )
    op.create_index('idx_households_commcare_case_id', 'households', ['commcare_case_id'], unique=False, schema='pima')
    op.create_index('idx_households_farmer_group_id', 'households', ['farmer_group_id'], unique=False, schema='pima')
    op.create_index('idx_households_sf_id', 'households', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_households_tns_id', 'households', ['tns_id'], unique=False, schema='pima')
    op.create_table('training_sessions',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('trainer_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('module_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('farmer_group_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('date_session_1', sa.Date(), nullable=True),
    sa.Column('date_session_2', sa.Date(), nullable=True),
    sa.Column('commcare_case_id', sa.String(), nullable=True),
    sa.Column('male_attendees_session_1', sa.Integer(), nullable=True),
    sa.Column('female_attendees_session_1', sa.Integer(), nullable=True),
    sa.Column('total_attendees_session_1', sa.Integer(), nullable=True),
    sa.Column('male_attendees_session_2', sa.Integer(), nullable=True),
    sa.Column('female_attendees_session_2', sa.Integer(), nullable=True),
    sa.Column('total_attendees_session_2', sa.Integer(), nullable=True),
    sa.Column('male_attendees_agg', sa.Integer(), nullable=True),
    sa.Column('female_attendees_agg', sa.Integer(), nullable=True),
    sa.Column('total_attendees_agg', sa.Integer(), nullable=True),
    sa.Column('location_gps_latitude_session_1', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('location_gps_longitude_session_1', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('location_gps_altitude_session_1', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('location_gps_latitude_session_2', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('location_gps_longitude_session_2', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('location_gps_altitude_session_2', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('send_to_commcare', sa.Boolean(), nullable=True),
    sa.Column('send_to_commcare_status', sa.Enum('Pending', 'Processing', 'Complete', name='send_to_commcare_status_enum'), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farmer_group_id'], ['pima.farmer_groups.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['module_id'], ['pima.training_modules.id'], ),
    sa.ForeignKeyConstraint(['trainer_id'], ['pima.staff.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index(op.f('ix_pima_training_sessions_commcare_case_id'), 'training_sessions', ['commcare_case_id'], unique=True, schema='pima')
    op.create_table('farmers',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('household_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('farmer_group_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('tns_id', sa.String(), nullable=False),
    sa.Column('commcare_case_id', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('middle_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('other_id', sa.String(), nullable=True),
    sa.Column('gender', sa.Enum('Male', 'Female', name='gender_enum'), nullable=False),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('is_primary_household_member', sa.Boolean(), nullable=True),
    sa.Column('status', sa.Enum('Active', 'Inactive', name='status_enum'), nullable=False),
    sa.Column('send_to_commcare', sa.Boolean(), nullable=True),
    sa.Column('send_to_commcare_status', sa.Enum('Pending', 'Processing', 'Complete', name='send_to_commcare_status_enum'), nullable=False),
    sa.Column('status_notes', sa.String(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.CheckConstraint('age >= 0 AND age <= 100', name='check_age_non_negative_and_reasonable'),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farmer_group_id'], ['pima.farmer_groups.id'], ),
    sa.ForeignKeyConstraint(['household_id'], ['pima.households.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index('idx_farmers_commcare_case_id', 'farmers', ['commcare_case_id'], unique=False, schema='pima')
    op.create_index('idx_farmers_farmer_group_id', 'farmers', ['farmer_group_id'], unique=False, schema='pima')
    op.create_index('idx_farmers_household_id', 'farmers', ['household_id'], unique=False, schema='pima')
    op.create_index('idx_farmers_sf_id', 'farmers', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_farmers_tns_id', 'farmers', ['tns_id'], unique=False, schema='pima')
    op.create_index(op.f('ix_pima_farmers_commcare_case_id'), 'farmers', ['commcare_case_id'], unique=True, schema='pima')
    op.create_index(op.f('ix_pima_farmers_tns_id'), 'farmers', ['tns_id'], unique=True, schema='pima')
    op.create_table('observations',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('observation_type', sa.Enum('Training', 'Demo Plot', name='observation_type_enum'), nullable=False),
    sa.Column('observer_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('trainer_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('farmer_group_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('training_session_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('observation_date', sa.Date(), nullable=False),
    sa.Column('location_gps_latitude', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('location_gps_longitude', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('location_gps_altitude', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('female_attendees', sa.Integer(), nullable=True),
    sa.Column('male_attendees', sa.Integer(), nullable=True),
    sa.Column('total_attendees', sa.Integer(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farmer_group_id'], ['pima.farmer_groups.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['observer_id'], ['pima.staff.id'], ),
    sa.ForeignKeyConstraint(['trainer_id'], ['pima.staff.id'], ),
    sa.ForeignKeyConstraint(['training_session_id'], ['pima.training_sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index('idx_observations_farmer_group_id', 'observations', ['farmer_group_id'], unique=False, schema='pima')
    op.create_index('idx_observations_observer_id', 'observations', ['observer_id'], unique=False, schema='pima')
    op.create_index('idx_observations_submission_id', 'observations', ['submission_id'], unique=False, schema='pima')
    op.create_index('idx_observations_trainer_id', 'observations', ['trainer_id'], unique=False, schema='pima')
    op.create_index('idx_observations_training_session_id', 'observations', ['training_session_id'], unique=False, schema='pima')
    op.create_table('attendances',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('farmer_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('training_session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_attended', sa.Date(), nullable=False),
    sa.Column('status', postgresql.ENUM('Present', 'Absent', name='attendance_status_enum'), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.CheckConstraint('date_attended <= CURRENT_DATE', name='chk_date_attended_not_future'),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farmer_id'], ['pima.farmers.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['training_session_id'], ['pima.training_sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('submission_id'),
    schema='pima'
    )
    op.create_index('idx_attendances_farmer_id', 'attendances', ['farmer_id'], unique=False, schema='pima')
    op.create_index('idx_attendances_sf_id', 'attendances', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_attendances_submission_id', 'attendances', ['submission_id'], unique=False, schema='pima')
    op.create_index('idx_attendances_training_session_id', 'attendances', ['training_session_id'], unique=False, schema='pima')
    op.create_table('farm_visits',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('visited_household_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('visited_primary_farmer_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('visited_secondary_farmer_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('training_session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('visiting_staff_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_visited', sa.Date(), nullable=False),
    sa.Column('farm_visit_type', sa.Enum('Farm Visit Full - ET', 'Farm Visit Full - KE', 'Farm Visit Full - PR', 'Farm Visit Full - ZM', name='farm_visit_type_enum'), nullable=False),
    sa.Column('visit_comments', sa.String(), nullable=True),
    sa.Column('latest_visit', sa.Boolean(), nullable=False),
    sa.Column('location_gps_latitude', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('location_gps_longitude', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('location_gps_altitude', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('number_of_cuerdas', sa.Integer(), nullable=True),
    sa.Column('number_of_separate_coffee_fields', sa.Integer(), nullable=True),
    sa.Column('field_age', sa.Numeric(), nullable=True),
    sa.Column('field_size', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['training_session_id'], ['pima.training_sessions.id'], ),
    sa.ForeignKeyConstraint(['visited_household_id'], ['pima.households.id'], ),
    sa.ForeignKeyConstraint(['visited_primary_farmer_id'], ['pima.farmers.id'], ),
    sa.ForeignKeyConstraint(['visited_secondary_farmer_id'], ['pima.farmers.id'], ),
    sa.ForeignKeyConstraint(['visiting_staff_id'], ['pima.staff.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('submission_id'),
    schema='pima'
    )
    op.create_index('idx_farm_visits_sf_id', 'farm_visits', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_farm_visits_submission_id', 'farm_visits', ['submission_id'], unique=False, schema='pima')
    op.create_index('idx_farm_visits_training_session_id', 'farm_visits', ['training_session_id'], unique=False, schema='pima')
    op.create_index('idx_farm_visits_visited_household_id', 'farm_visits', ['visited_household_id'], unique=False, schema='pima')
    op.create_index('idx_farm_visits_visited_primary_farmer_id', 'farm_visits', ['visited_primary_farmer_id'], unique=False, schema='pima')
    op.create_index('idx_farm_visits_visited_secondary_farmer_id', 'farm_visits', ['visited_secondary_farmer_id'], unique=False, schema='pima')
    op.create_index('idx_farm_visits_visiting_staff_id', 'farm_visits', ['visiting_staff_id'], unique=False, schema='pima')
    op.create_table('observation_results',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('observation_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('criterion', sa.String(), nullable=True),
    sa.Column('question_key', sa.String(), nullable=True),
    sa.Column('result_text', sa.String(), nullable=True),
    sa.Column('result_numeric', sa.Numeric(), nullable=True),
    sa.Column('result_boolean', sa.Boolean(), nullable=True),
    sa.Column('result_url', sa.String(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['observation_id'], ['pima.observations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    schema='pima'
    )
    op.create_index('idx_observation_results_observation_id', 'observation_results', ['observation_id'], unique=False, schema='pima')
    op.create_index('idx_observation_results_submission_id', 'observation_results', ['submission_id'], unique=False, schema='pima')
    op.create_table('checks',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('farmer_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('checker_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('observation_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('farm_visit_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('training_session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('check_type', sa.Enum('Training Observation', 'Farm Visit', name='check_type_enum'), nullable=False),
    sa.Column('date_completed', sa.Date(), nullable=False),
    sa.Column('attended_trainings', sa.Boolean(), nullable=True),
    sa.Column('number_of_trainings_attended', sa.Integer(), nullable=True),
    sa.Column('attended_last_months_training', sa.Boolean(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.CheckConstraint('date_completed <= CURRENT_DATE', name='chk_date_completed_not_future'),
    sa.CheckConstraint('number_of_trainings_attended <= 50 AND number_of_trainings_attended >= 0', name='chk_number_of_trainings_attended_valid'),
    sa.ForeignKeyConstraint(['checker_id'], ['pima.staff.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farm_visit_id'], ['pima.farm_visits.id'], ),
    sa.ForeignKeyConstraint(['farmer_id'], ['pima.farmers.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['observation_id'], ['pima.observations.id'], ),
    sa.ForeignKeyConstraint(['training_session_id'], ['pima.training_sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('submission_id'),
    schema='pima'
    )
    op.create_index('idx_checks_checker_id', 'checks', ['checker_id'], unique=False, schema='pima')
    op.create_index('idx_checks_farm_visit_id', 'checks', ['farm_visit_id'], unique=False, schema='pima')
    op.create_index('idx_checks_farmer_id', 'checks', ['farmer_id'], unique=False, schema='pima')
    op.create_index('idx_checks_observation_id', 'checks', ['observation_id'], unique=False, schema='pima')
    op.create_index('idx_checks_sf_id', 'checks', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_checks_submission_id', 'checks', ['submission_id'], unique=False, schema='pima')
    op.create_index('idx_checks_training_session_id', 'checks', ['training_session_id'], unique=False, schema='pima')
    op.create_table('farms',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('farm_visit_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('household_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('farm_name', sa.String(), nullable=False),
    sa.Column('location_gps_latitude', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('location_gps_longitude', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('location_gps_altitude', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('farm_size_coffee_trees', sa.Integer(), nullable=False),
    sa.Column('farm_size_land_measurements', sa.Numeric(precision=10, scale=6), nullable=False),
    sa.Column('main_coffee_field', sa.Boolean(), nullable=False),
    sa.Column('planting_month_and_year', sa.Date(), nullable=False),
    sa.Column('planted_out_of_season', sa.Boolean(), nullable=False),
    sa.Column('tns_id', sa.String(), nullable=False),
    sa.Column('planted_out_of_season_comments', sa.String(), nullable=True),
    sa.Column('planted_on_visit_date', sa.Boolean(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.CheckConstraint('farm_size_coffee_trees >= 0', name='check_farm_size_coffee_trees_non_negative'),
    sa.CheckConstraint('farm_size_land_measurements >= 0', name='check_farm_size_land_measurements_non_negative'),
    sa.CheckConstraint('planting_month_and_year <= CURRENT_DATE', name='check_planting_month_and_year_not_in_future'),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farm_visit_id'], ['pima.farm_visits.id'], ),
    sa.ForeignKeyConstraint(['household_id'], ['pima.households.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('submission_id'),
    sa.UniqueConstraint('tns_id'),
    schema='pima'
    )
    op.create_index('idx_farms_farm_visit_id', 'farms', ['farm_visit_id'], unique=False, schema='pima')
    op.create_index('idx_farms_household_id', 'farms', ['household_id'], unique=False, schema='pima')
    op.create_index('idx_farms_sf_id', 'farms', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_farms_submission_id', 'farms', ['submission_id'], unique=False, schema='pima')
    op.create_index('idx_farms_tns_id', 'farms', ['tns_id'], unique=False, schema='pima')
    op.create_table('fv_best_practices',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('farm_visit_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('best_practice_type', sa.String(), nullable=False),
    sa.Column('is_bp_verified', sa.Boolean(), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farm_visit_id'], ['pima.farm_visits.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('submission_id'),
    schema='pima'
    )
    op.create_index('idx_fv_best_practices_farm_visit_id', 'fv_best_practices', ['farm_visit_id'], unique=False, schema='pima')
    op.create_index('idx_fv_best_practices_sf_id', 'fv_best_practices', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_fv_best_practices_submission_id', 'fv_best_practices', ['submission_id'], unique=False, schema='pima')
    op.create_table('coffee_varieties',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('variety_name', sa.String(), nullable=False),
    sa.Column('number_of_trees', sa.Integer(), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('farm_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['farm_id'], ['pima.farms.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('submission_id'),
    schema='pima'
    )
    op.create_index('idx_coffee_varieties_farm_id', 'coffee_varieties', ['farm_id'], unique=False, schema='pima')
    op.create_index('idx_coffee_varieties_sf_id', 'coffee_varieties', ['sf_id'], unique=False, schema='pima')
    op.create_index('idx_coffee_varieties_submission_id', 'coffee_varieties', ['submission_id'], unique=False, schema='pima')
    op.create_table('fv_best_practice_answers',
    sa.Column('from_sf', sa.Boolean(), nullable=False),
    sa.Column('sf_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('submission_id', sa.String(), nullable=False),
    sa.Column('fv_best_practice_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('question_key', sa.String(), nullable=False),
    sa.Column('answer_text', sa.String(), nullable=True),
    sa.Column('answer_numeric', sa.Numeric(), nullable=True),
    sa.Column('answer_boolean', sa.Boolean(), nullable=True),
    sa.Column('answer_url', sa.String(), nullable=True),
    sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('last_updated_by_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['pima.users.id'], ),
    sa.ForeignKeyConstraint(['fv_best_practice_id'], ['pima.fv_best_practices.id'], ),
    sa.ForeignKeyConstraint(['last_updated_by_id'], ['pima.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sf_id'),
    sa.UniqueConstraint('submission_id'),
    schema='pima'
    )
    op.create_index('idx_fv_best_practice_answers_fv_best_practice_id', 'fv_best_practice_answers', ['fv_best_practice_id'], unique=False, schema='pima')
    op.create_index('idx_fv_best_practice_answers_submission_id', 'fv_best_practice_answers', ['submission_id'], unique=False, schema='pima')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_fv_best_practice_answers_submission_id', table_name='fv_best_practice_answers', schema='pima')
    op.drop_index('idx_fv_best_practice_answers_fv_best_practice_id', table_name='fv_best_practice_answers', schema='pima')
    op.drop_table('fv_best_practice_answers', schema='pima')
    op.drop_index('idx_coffee_varieties_submission_id', table_name='coffee_varieties', schema='pima')
    op.drop_index('idx_coffee_varieties_sf_id', table_name='coffee_varieties', schema='pima')
    op.drop_index('idx_coffee_varieties_farm_id', table_name='coffee_varieties', schema='pima')
    op.drop_table('coffee_varieties', schema='pima')
    op.drop_index('idx_fv_best_practices_submission_id', table_name='fv_best_practices', schema='pima')
    op.drop_index('idx_fv_best_practices_sf_id', table_name='fv_best_practices', schema='pima')
    op.drop_index('idx_fv_best_practices_farm_visit_id', table_name='fv_best_practices', schema='pima')
    op.drop_table('fv_best_practices', schema='pima')
    op.drop_index('idx_farms_tns_id', table_name='farms', schema='pima')
    op.drop_index('idx_farms_submission_id', table_name='farms', schema='pima')
    op.drop_index('idx_farms_sf_id', table_name='farms', schema='pima')
    op.drop_index('idx_farms_household_id', table_name='farms', schema='pima')
    op.drop_index('idx_farms_farm_visit_id', table_name='farms', schema='pima')
    op.drop_table('farms', schema='pima')
    op.drop_index('idx_checks_training_session_id', table_name='checks', schema='pima')
    op.drop_index('idx_checks_submission_id', table_name='checks', schema='pima')
    op.drop_index('idx_checks_sf_id', table_name='checks', schema='pima')
    op.drop_index('idx_checks_observation_id', table_name='checks', schema='pima')
    op.drop_index('idx_checks_farmer_id', table_name='checks', schema='pima')
    op.drop_index('idx_checks_farm_visit_id', table_name='checks', schema='pima')
    op.drop_index('idx_checks_checker_id', table_name='checks', schema='pima')
    op.drop_table('checks', schema='pima')
    op.drop_index('idx_observation_results_submission_id', table_name='observation_results', schema='pima')
    op.drop_index('idx_observation_results_observation_id', table_name='observation_results', schema='pima')
    op.drop_table('observation_results', schema='pima')
    op.drop_index('idx_farm_visits_visiting_staff_id', table_name='farm_visits', schema='pima')
    op.drop_index('idx_farm_visits_visited_secondary_farmer_id', table_name='farm_visits', schema='pima')
    op.drop_index('idx_farm_visits_visited_primary_farmer_id', table_name='farm_visits', schema='pima')
    op.drop_index('idx_farm_visits_visited_household_id', table_name='farm_visits', schema='pima')
    op.drop_index('idx_farm_visits_training_session_id', table_name='farm_visits', schema='pima')
    op.drop_index('idx_farm_visits_submission_id', table_name='farm_visits', schema='pima')
    op.drop_index('idx_farm_visits_sf_id', table_name='farm_visits', schema='pima')
    op.drop_table('farm_visits', schema='pima')
    op.drop_index('idx_attendances_training_session_id', table_name='attendances', schema='pima')
    op.drop_index('idx_attendances_submission_id', table_name='attendances', schema='pima')
    op.drop_index('idx_attendances_sf_id', table_name='attendances', schema='pima')
    op.drop_index('idx_attendances_farmer_id', table_name='attendances', schema='pima')
    op.drop_table('attendances', schema='pima')
    op.drop_index('idx_observations_training_session_id', table_name='observations', schema='pima')
    op.drop_index('idx_observations_trainer_id', table_name='observations', schema='pima')
    op.drop_index('idx_observations_submission_id', table_name='observations', schema='pima')
    op.drop_index('idx_observations_observer_id', table_name='observations', schema='pima')
    op.drop_index('idx_observations_farmer_group_id', table_name='observations', schema='pima')
    op.drop_table('observations', schema='pima')
    op.drop_index(op.f('ix_pima_farmers_tns_id'), table_name='farmers', schema='pima')
    op.drop_index(op.f('ix_pima_farmers_commcare_case_id'), table_name='farmers', schema='pima')
    op.drop_index('idx_farmers_tns_id', table_name='farmers', schema='pima')
    op.drop_index('idx_farmers_sf_id', table_name='farmers', schema='pima')
    op.drop_index('idx_farmers_household_id', table_name='farmers', schema='pima')
    op.drop_index('idx_farmers_farmer_group_id', table_name='farmers', schema='pima')
    op.drop_index('idx_farmers_commcare_case_id', table_name='farmers', schema='pima')
    op.drop_table('farmers', schema='pima')
    op.drop_index(op.f('ix_pima_training_sessions_commcare_case_id'), table_name='training_sessions', schema='pima')
    op.drop_table('training_sessions', schema='pima')
    op.drop_index('idx_households_tns_id', table_name='households', schema='pima')
    op.drop_index('idx_households_sf_id', table_name='households', schema='pima')
    op.drop_index('idx_households_farmer_group_id', table_name='households', schema='pima')
    op.drop_index('idx_households_commcare_case_id', table_name='households', schema='pima')
    op.drop_table('households', schema='pima')
    op.drop_table('training_modules', schema='pima')
    op.drop_table('project_staff_roles', schema='pima')
    op.drop_index(op.f('ix_pima_farmer_groups_tns_id'), table_name='farmer_groups', schema='pima')
    op.drop_index(op.f('ix_pima_farmer_groups_commcare_case_id'), table_name='farmer_groups', schema='pima')
    op.drop_index('idx_farmer_groups_tns_id', table_name='farmer_groups', schema='pima')
    op.drop_index('idx_farmer_groups_responsible_staff_id', table_name='farmer_groups', schema='pima')
    op.drop_index('idx_farmer_groups_project_id', table_name='farmer_groups', schema='pima')
    op.drop_index('idx_farmer_groups_commcare_case_id', table_name='farmer_groups', schema='pima')
    op.drop_table('farmer_groups', schema='pima')
    op.drop_table('projects', schema='pima')
    op.drop_index(op.f('ix_pima_staff_tns_id'), table_name='staff', schema='pima')
    op.drop_index(op.f('ix_pima_staff_email'), table_name='staff', schema='pima')
    op.drop_index(op.f('ix_pima_staff_commcare_mobile_worker_id'), table_name='staff', schema='pima')
    op.drop_table('staff', schema='pima')
    op.drop_table('programs', schema='pima')
    op.drop_index('idx_locations_parent_location_id', table_name='locations', schema='pima')
    op.drop_table('locations', schema='pima')
    op.drop_table('images', schema='pima')
    op.drop_index(op.f('ix_pima_users_username'), table_name='users', schema='pima')
    op.drop_index(op.f('ix_pima_users_email'), table_name='users', schema='pima')
    op.drop_table('users', schema='pima')
    # ### end Alembic commands ###
